# Computer Science 61A, UC Berkeley

book/lecture: CS 61A

author/instructor: Brian Harvey

companion textbook: Abelson, Sussman, Sussman - Structure and Interpretation of Computer Programs (2E)

notes written by Horace Z.

from 2022/03/02 to

# 0. Miscellaneous

## lectures and corresponding readings

1. Functional programming (1.1)
2. Functional programming (1.1)
3. Higher-order procedures (1.3)
4. Higher-order procedures (1.3)
5. User interface Alan Kay (1.3)
6. User interface Alan Kay (1.2.1–4)
7. Orders of growth (1.2.1–4)
8. Recursion and iteration (1.2.1–4)
9. Data abstraction (2.1, 2.2.1)
10. Sequences (2.1, 2.2.1)
11. Example calculator (2.1, 2.2.1)
12. Hierarchical data (2.2.2–3, 2.3.1,3)
13. Hierarchical data (2.2.2–3, 2.3.1,3)
14. Example Scheme (2.2.2–3, 2.3.1,3)
15. No lecture available
16. Generic operators (2.4–2.5.2)
17. Generic operators (2.4–2.5.2)
18. Object-oriented programming (OOP (reader))
19. Object oriented programming (OOP (reader))
20. Object oriented programming (OOP (reader))
21. Assignment and state (3.1, 3.2)
22. Environments (3.1, 3.2)
23. Environments (3.1, 3.2)
24. Mutable data (3.3.1–3)
25. Mutable data (3.3.1–3)
26. Vectors (3.3.1–3)
27. No lecture available
28. No lecture available
29. No lecture available
30. Client-server programming (3.4)
31. Concurrency (3.4)
32. Concurrency (3.4)
33. Streams (3.5.1–3, 3.5.5, Therac (reader))
34. Streams (3.5.1–3, 3.5.5, Therac (reader))
35. Therac-25 (3.5.1–3, 3.5.5, Therac (reader))
36. Metacircular evaluator (4.1.1–6)
37. Metacircular evaluator (4.1.1–6)
38. Mapreduce (4.1.1–6)
39. Mapreduce (4.1.7, 4.2)
40. Analyzing evaluator (4.1.7, 4.2)
41. Lazy evaluator (4.1.7, 4.2)
42. Logic programming (4.4.1–3)
43. Logic programming (4.4.1–3)
44. Review (4.4.1–3)

# 1. Functional Programming

the course is using Scheme, but it is not a course about Scheme

the version of Scheme is used in this course is called STK, which is similar to IDLE for Python

## Scheme notation

operator is placed at the beginning as prefix, `+ 1 1`

conveniently, `+ 1 2 3 4`

`+` returns `0`, `*` returns `1`, identity elements

`/` returns error

### recall mathematical notations

infix notation like `1 + 1`

prefix notation `sin 2`

suffix notation `3!`

lastly, all-around operator `square root of 2`
